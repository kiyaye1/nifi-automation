---
- name: Install and configure Apache NiFi
  hosts: nifi
  become: yes

  vars:
    nifi_version: "1.26.0"
    nifi_archive_url: "https://archive.apache.org/dist/nifi/{{ nifi_version }}/nifi-{{ nifi_version }}-bin.zip"
    nifi_install_dir: "/opt"
    nifi_zip_path: "/opt/nifi-{{ nifi_version }}-bin.zip"
    nifi_extracted_dir: "/opt/nifi-{{ nifi_version }}"
    nifi_target_dir: "/opt/nifi"

  tasks:
    - name: Update APT packages
      apt:
        update_cache: yes

    - name: Install Java 17
      apt:
        name: openjdk-17-jdk
        state: present

    - name: Download NiFi
      get_url:
        url: "{{ nifi_archive_url }}"
        dest: "{{ nifi_zip_path }}"

    - name: Unzip NiFi
      unarchive:
        src: "{{ nifi_zip_path }}"
        dest: "{{ nifi_install_dir }}"
        remote_src: yes

    - name: Rename NiFi directory
      command: mv "{{ nifi_extracted_dir }}" "{{ nifi_target_dir }}"
      args:
        creates: "{{ nifi_target_dir }}"

    - name: Get EC2 private IP
      shell: hostname -I | awk '{print $1}'
      register: private_ip

    - name: Set HTTP host to EC2 private IP
      lineinfile:
        path: "{{ nifi_target_dir }}/conf/nifi.properties"
        regexp: '^nifi.web.http.host='
        line: "nifi.web.http.host={{ private_ip.stdout }}"

    - name: Set HTTP port to 8443
      lineinfile:
        path: "{{ nifi_target_dir }}/conf/nifi.properties"
        regexp: '^nifi.web.http.port='
        line: 'nifi.web.http.port=8443'

    - name: Comment out security properties
      replace:
        path: "{{ nifi_target_dir }}/conf/nifi.properties"
        regexp: '^nifi.security.(keystore|keystoreType|keystorePasswd|keyPasswd|truststore|truststoreType)='
        replace: '#\g<0>'

    - name: Create NiFi systemd service
      copy:
        dest: /etc/systemd/system/nifi.service
        content: |
          [Unit]
          Description=Apache NiFi
          After=network.target

          [Service]
          Type=forking
          ExecStart={{ nifi_target_dir }}/bin/nifi.sh start
          ExecStop={{ nifi_target_dir }}/bin/nifi.sh stop
          Restart=on-failure
          User=ubuntu

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd and enable NiFi
      systemd:
        daemon_reload: yes
        name: nifi
        enabled: yes
        state: started
